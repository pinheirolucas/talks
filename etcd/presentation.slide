etcd
DB Talks, Ep. 3

* O que é? Aonde mora? Do que se alimenta?

.image gifs/what-is.gif 500 _

* ...

- "Banco de dados" de armazenamento chave valor

* E de onde vem o nome?

*etc*

Diretório utilizado para guardar configuraçoes a nível de sistema em SO's unix

*d*

Distribuído

*Ou* *seja...*

Sistema de armazenamento de configurações distribuído

* Características do projeto

- Open-source
- Escrito em Go
- Setup súper simples, apenas um binário
- Projeto incubado na CNCF (Kubernetes, Prometheus, Envoy e etc)
- Atende casos de uso semelhantes aos do zookeeper ou consul

* Funcionalidades do banco de dados

- Armazenamento de dados em formato chave-valor, aninhados ou não aninhados
- Versionamento de chaves (com ressalvas)
- Escutar modificações causadas por escritas em chaves ou ranges de chaves
- Consultas simples por meio da representação de string das chaves
- Iteração e paginação de chaves

* Ou seja, ele te atenderá muito bem em casos de uso como...

- Um simples centralizador de configurações para sistemas/aplicações distribuídas
- Implementações de service discovery
- Hot reload de configurações de aplicações ou ferramentas
- Armazenamento de dados simples e não relacionados

* Autenticação

- Simples orientada a usuário e senha
- Por meio de certificados SSL (vem de graça por conta do gRPC)

* Interação com o etcd

- Expõe uma API gRPC
- Portanto é compatível com qualquer linguagem suportada oficialmente pelo gRPC
- Também utiliza o gRPC gateway como camada de compatibilidade para linguagens não suportadas pelo gRPC

* Então quer dizer que eu posso gerar meu próprio client?

.image gifs/yep.gif 400 _

* ...

Mas esse é um caso de uso extremo

* Suporte a TTL

- Implementação por meio de lease
- Cada lease pode ser atribuída para mais de uma chave
- Quando a condição para a lease for atendida, todas as chaves são invalidadas/excluídas

* Modelo de armazenamento

- Os pares de chave/valor são imutáveis
- Ordenação lexica para as chaves salvas
- Persistência em disco por meio de um arquivo de logs (semelhante a utilizada no modo AOF do redis)
- Ao ultrapassar os limites de uso configurados, o arquivo de logs é compactado

* Interação com o etcd

Escrever em uma chave

  $ etcdctl put user-service1 http://localhost:3001
  OK

Escrever em uma chave com lease

  $ etcdctl put user-service2 http://localhost:3002 --lease=1234abcd
  OK

* Interação com o etcd

Dado um cluster com os seguintes dados armazenados

  user-service1 = http://localhost:3001
  user-service2 = http://localhost:3002
  user-service3 = http://localhost:3003
  user-service4 = http://localhost:3004

Ler dados de uma chave

  $ etcdctl get user-service1
  user-service1
  http://localhost:3001

* Interação com o etcd

Ler dados entre as chaves user-service1 e user-service4

  $ etcdctl get user-service1 user-service4
  user-service1
  http://localhost:3001
  user-service2
  http://localhost:3002
  user-service3
  http://localhost:3003

Considera intervalo meio aberto, ou seja, inclui o primeiro elemento e ignora o último

* Interação com o etcd

Ler chaves com determinado prefixo, limitando os resultados

  $ etcdctl get --prefix --limit=2 user-service
  user-service1
  http://localhost:3001
  user-service2
  http://localhost:3002

* Interação com o etcd

Ler chaves em revisões diferentes

Dados os seguintes comandos de escrita

  $ etcdctl put user-service1 http://localhost:3001
  $ etcdctl put user-service2 http://localhost:3002
  $ etcdctl put user-service3 http://localhost:3003
  $ etcdctl put user-service4 http://localhost:3004

Ler a revisão 4 das chaves prefixadas com *user-service*

  $ etcdctl get --prefix --rev=4 user-service
  user-service1
  http://localhost:3001
  user-service2
  http://localhost:3002
  user-service3
  http://localhost:3003
  user-service4
  http://localhost:3004

* Interação com o etcd

Ler a revisão 2 das chaves prefixadas com *user-service*

  $ etcdctl get --prefix --rev=2 user-service
  user-service1
  http://localhost:3001
  user-service2
  http://localhost:3002

* Interação com o etcd

Escutar por modificações em uma chave

  $ etcdctl watch user-service1
  # alguém executa etcdctl put user-service1 http://localhost:3004
  PUT
  user-service1
  http://localhost:3004

Escutar por modificações em um range de chaves

  $ etcdctl watch user-service1 user-service3
  # alguém executa etcdctl put user-service1 http://localhost:3004
  PUT
  user-service1
  http://localhost:3004
  # alguém executa etcdctl put user-service2 http://localhost:3005
  PUT
  user-service2
  http://localhost:3005
  # alguém executa etcdctl put user-service3 http://localhost:3006
  ...nada acontece feijoada

* Aplicações e ferramentas com suporte ao etcd

- Kubernetes (persiste o estado do cluster)
- gRPC (service discovery)
- Envoy

* Links úteis

.link https://etcd.io/ Documentação

* Dúvidas?
